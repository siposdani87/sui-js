import { Collection } from '../core/collection';
import { Knot } from '../core/knot';
import { Objekt } from '../core/objekt';
import { Query } from '../core/query';
import { ContentHandler } from './contentHandler';
import { Pager } from './pager';
import { Action } from '../utils';
export type TableCalculation<T = Objekt> = {
    [key in string]: (item: T, index: number, parentKnot: Knot) => Knot[] | Knot | string;
};
export declare class Table<T extends Objekt = Objekt> {
    tableKnot: Knot;
    options: Objekt;
    collection: Collection<T>;
    query: string;
    actions: Action[];
    contentHandler: ContentHandler;
    headerKnots: Query<HTMLElement>;
    headerTexts: string[];
    tbody: Knot;
    tfoot: Knot;
    pager: Pager;
    constructor(dom: Knot, opt_selector?: string | undefined, opt_options?: Object | undefined);
    private _setOptions;
    private _init;
    private _initContentHandler;
    private _initSearch;
    private _initHeader;
    private _renderHeader;
    private _initStructure;
    refresh(opt_page?: number | undefined): void;
    eventAction(params: Objekt): void;
    private _toggleSorting;
    private _handleSortingColumn;
    private _updateSorting;
    private _setSorting;
    private _resetSorting;
    private _getColumn;
    private _addHeaderRow;
    private _getRowStyle;
    private _addRow;
    setActions(actions: Array<Action>): void;
    private _renderDataKnotByKnot;
    private _renderDataKnot;
    private _renderActions;
    private _renderActionKnots;
    private _renderDropDownKnot;
    private _createActionButton;
    setData(items: Array<any>): void;
    setCount(count: number): void;
    private _getItems;
    private _draw;
    render(): void;
}
