import { Collection } from '../core/collection';
import { Objekt } from '../core/objekt';
import { BaseField } from '../field';
import { Knot } from '../core';
export declare class Form extends Collection<BaseField<HTMLInputElement>> {
    formKnot: Knot<HTMLFormElement>;
    previousModel: Objekt;
    model: Objekt;
    initFields: string[];
    buttonClasses: string[];
    fieldClasses: string[];
    constructor(dom: Knot, opt_selector?: string | undefined);
    private _init;
    private _initFormEvent;
    private _initSubmitFormEvent;
    private _initResetFormEvent;
    private _initFields;
    setModel(model: Objekt, opt_force?: boolean | undefined, opt_showMessage?: boolean | undefined): void;
    getModel(): Objekt;
    reset(opt_force?: boolean | undefined, opt_showMessage?: boolean | undefined): void;
    private _setValue;
    private _getValue;
    private _getPreviousValue;
    private _fieldValueChange;
    setErrors(data: Object): void;
    checkValidity(opt_force?: boolean | undefined, opt_showMessage?: boolean | undefined): boolean;
    isValid(): boolean;
    isInvalid(): boolean;
    refresh(): void;
    findByModel<T = BaseField<HTMLInputElement>>(name: string): T;
    lock(): void;
    unlock(): void;
    eventSubmit(model: Objekt, knot: Knot): void;
    eventReset(model: Objekt, knot: Knot): void;
    eventButton(model: Objekt, knot: Knot): void;
}
