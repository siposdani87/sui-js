import { Id } from '../utils';
import { Objekt } from './objekt';
export declare class Collection<T extends Object = Object> {
    Type: any;
    items: T[];
    options: Objekt;
    constructor(opt_items?: Array<T> | undefined, opt_type?: any, opt_options?: Object);
    private _setOptions;
    load(objects: Array<Object | T>): void;
    reload(objects: Array<Object | T>): void;
    push(object: Object | T): T;
    private _createItem;
    set(index: number, object: Object | T): T;
    replace(object: Object | T): T | null;
    getItems(): Array<T>;
    iterator(callback: (_item: T) => boolean, next: (_item: T, _index: number) => void, opt_items?: Array<T> | undefined): Array<T>;
    each(next: (_item: T, _index: number) => void): void;
    get<K = T>(index: number, opt_attribute?: string | undefined): T | K | null;
    getById<K = T>(id: Id, opt_attribute?: string): T | K;
    clear(): void;
    findById(id: Id): T;
    findBy(attribute: string, value: any): T;
    findByCondition(conditionCallback: Function): T;
    findAllBy(attribute: string, value: any): Array<T>;
    findAllByCondition(conditionCallback: Function): Array<T>;
    delete(value: Object | T): T;
    deleteById(id: Id): T;
    deleteBy(attribute: string, value: any): T;
    deleteByCondition(conditionCallback: Function): T;
    deleteAllBy(attribute: string, value: any): Array<T>;
    deleteAllByCondition(conditionCallback: Function): Array<T>;
    size(): number;
    limit(offset: number, opt_count?: number | undefined): Array<T>;
}
