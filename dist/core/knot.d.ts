import { Listener } from '../utils';
export declare class Knot<T extends HTMLElement = HTMLElement> {
    node: T;
    parentKnot: Knot | undefined;
    listenerStoreKey: string;
    constructor(node: (T | HTMLElement | string) | null, opt_parentKnot?: Knot | undefined);
    setParentKnot(parentKnot: Knot | undefined): void;
    set(attribute: string, value: boolean | number | string): void;
    merge(properties: Object): void;
    get(attribute: string): any;
    getNode(): T;
    getTagName(): string;
    getId(): string | null;
    setId(id: boolean | number | string): void;
    setFor(htmlFor: boolean | number | string): void;
    getFor(): string | null;
    hasClass(cssClass: string): boolean;
    private _handleClassList;
    addClass(cssClasses: Array<string> | string): void;
    removeClass(cssClasses: Array<string> | string): void;
    toggleClass(cssClasses: Array<string> | string): void;
    getClasses(): Array<string>;
    setAttribute(attribute: string, opt_value?: (Object | Function | Array<any> | boolean | number | string | null | undefined) | undefined): void;
    getAttribute(attribute: string): any;
    removeAttribute(attribute: string): void;
    hasAttribute(attribute: string): boolean;
    addEventListener(eventName: string, opt_callback?: (knot: Knot<T>, event: any) => any): Function;
    private _addListenerToStore;
    private _getListenersFromStore;
    removeEventListener(eventName: keyof GlobalEventHandlersEventMap, listener: Listener): void;
    removeEventListeners(eventName: keyof GlobalEventHandlersEventMap): void;
    dispatchEvent(event: Event): void;
    trigger(eventName: string): void;
    createElement<K extends HTMLElement = HTMLElement>(tagName: string): Knot<K>;
    appendChild(knot: Knot): void;
    removeChildren(): void;
    hasChildren(): boolean;
    removeChild(knot: Knot): void;
    remove(): void;
    insert(knot: Knot): void;
    beforeChild(knot: Knot): boolean;
    afterChild(knot: Knot): boolean;
    insertBefore(knot: Knot): boolean;
    insertAfter(knot: Knot): boolean;
    replaceChild(knot: Knot): boolean;
    getNextSibling(): Knot;
    setHtml(text: string): void;
    getHtml(opt_isInner?: boolean | undefined): string;
    setText(text: string): void;
    getText(): string;
    setData(name: string, value: any): void;
    getData(name: string): any;
    removeData(name: string): void;
    getParentKnot(): Knot | null;
    private _getParentElement;
    getComputedStyle(): CSSStyleDeclaration | null;
    getStyle(): CSSStyleDeclaration;
    setStyle(properties: Object): void;
    removeStyle(properties: Array<any>): void;
    isEmpty(): boolean;
    exists(): boolean;
    toString(opt_isRoot?: boolean | undefined): string;
}
