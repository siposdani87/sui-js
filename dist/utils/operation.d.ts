import { Objekt } from '../core';
export declare const typeCast: (value: any) => any;
export declare const merge: (objA: Object, objB: Object) => Object | undefined;
export declare const format: <T>(str: string, opt_params?: Object | Array<T> | null | undefined, opt_prefix?: string | undefined, opt_postfix?: string | undefined) => string;
export declare const noop: <T>(opt_result?: T) => (() => T);
export declare const eq: (a: unknown, b: unknown) => boolean;
export declare const neq: (a: unknown, b: unknown) => boolean;
export declare const gt: (a: unknown, b: unknown) => boolean;
export declare const gte: (a: unknown, b: unknown) => boolean;
export declare const lt: (a: unknown, b: unknown) => boolean;
export declare const lte: (a: unknown, b: unknown) => boolean;
export declare const isArray: <T>(value: any) => value is T[];
export declare const isFunction: (value: any) => value is Function;
export declare const isString: (value: any) => value is string;
export declare const isNumber: (value: any) => value is number;
export declare const isFloat: (value: any) => value is number;
export declare const isInteger: (value: any) => value is number;
export declare const isObject: (value: any) => value is Object;
export declare const isPureObject: (value: any) => value is Object;
export declare const isDate: (value: any) => value is Date;
export declare const isNull: (value: any) => value is null;
export declare const isInfinity: (value: any) => value is number;
export declare const isUndefined: (value: any) => value is undefined;
export declare const is: (value: any, type: string) => value is string;
export declare const instanceOf: <T>(value: any, obj: T) => boolean;
export declare const each: <T>(items: Array<T> | Object, next: (item: any, key: string | number) => void, opt_start?: number, opt_end?: number) => void;
export declare const eachArray: <T>(items: Array<T>, next: (item: T, index: number) => void, opt_start?: number | undefined, opt_end?: number | undefined) => void;
export declare const eachObject: (object: Object, next: (value: any, key: string) => void) => void;
export declare const sleepEach: (next: (_index: number) => void, i: number, length: number, duration: number) => void;
export declare const clear: <T>(items: Array<T> | Object) => void;
export declare const clearArray: <T>(items: Array<T>) => void;
export declare const clearObject: (items: Object) => void;
export declare const inArray: <T>(items: Array<T>, item: T) => boolean;
export declare const contain: (str: string, subStr: string) => boolean;
export declare const inContainArray: (items: Array<string>, item: string) => boolean;
export declare const isSame: (a: any, b: any) => boolean;
export declare const remove: <T>(items: Array<T>, item: T) => void;
export declare const copy: <T>(items: Array<T> | Object) => Array<T> | Object | undefined;
export declare const copyArray: <T>(items: Array<T>) => Array<T>;
export declare const copyObject: (item: Object) => Object;
export declare const isEmpty: <T>(items: Array<T> | Object) => boolean;
export declare const list: <T>(args: Array<T>, callback: (...rest: T[]) => void) => void;
export declare const capitalize: (str: string) => string;
export declare const pluck: <T, K extends Objekt<Object> = Objekt<Object>>(items: Array<K>, attribute: string) => Array<T>;
export declare const pluckKeys: (obj: Object, condition: (value: any, key: string) => boolean) => Array<string>;
export declare const scrollTo: (x: number, y: number, opt_duration?: number | undefined, opt_step?: number | undefined) => void;
export declare const scrollToElement: (selector: string, opt_duration?: number | undefined, opt_step?: number | undefined) => void;
export declare const scrollIntoView: (selector: string, opt_behavior?: ScrollBehavior | undefined) => void;
export declare const debounce: (func: (ev: Event) => void, opt_wait?: number | undefined, opt_immediate?: boolean | undefined) => ((this: Window, ev: Event) => void);
export declare const urlWithQueryString: (url: string, opt_params?: Object | undefined) => string;
export declare const getQueryString: (opt_params?: Object) => string;
export declare const getExtensionName: (url: string) => string;
export declare const normalize: (str: string) => string;
export declare const copyToClipboard: (str: string) => void;
