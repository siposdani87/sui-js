@use 'sass:map';
@use '../core/variables';
@use 'breakpoints';

@use 'sass:math';

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutters: variables.$grid-gutter-widths) {
    position: relative;
    margin-left: auto;
    margin-right: auto;

    @each $breakpoint in map.keys($gutters) {
        @include breakpoints.media-breakpoint-up($breakpoint) {
            $gutter: map.get($gutters, $breakpoint);

            padding-right: math.div($gutter, 2);
            padding-left: math.div($gutter, 2);
        }
    }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
    $max-widths: variables.$container-max-widths,
    $breakpoints: variables.$grid-breakpoints
) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include breakpoints.media-breakpoint-up(
            $breakpoint,
            false,
            $breakpoints
        ) {
            width: $container-max-width;
            max-width: 100%;
        }
    }
}

@mixin make-gutters($gutters: variables.$grid-gutter-widths) {
    @each $breakpoint in map.keys($gutters) {
        @include breakpoints.media-breakpoint-up($breakpoint) {
            $gutter: map.get($gutters, $breakpoint);

            padding-right: math.div($gutter, 2);
            padding-left: math.div($gutter, 2);
        }
    }
}

@mixin make-row($gutters: variables.$grid-gutter-widths) {
    display: flex;
    flex-wrap: wrap;

    @each $breakpoint in map.keys($gutters) {
        @include breakpoints.media-breakpoint-up($breakpoint) {
            $gutter: map.get($gutters, $breakpoint);

            margin-right: math.div($gutter, -2);
            margin-left: math.div($gutter, -2);
        }
    }
}

@mixin make-col-ready($gutters: variables.$grid-gutter-widths) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing

    @each $breakpoint in map.keys($gutters) {
        @include breakpoints.media-breakpoint-up($breakpoint) {
            $gutter: map.get($gutters, $breakpoint);

            padding-right: math.div($gutter, 2);
            padding-left: math.div($gutter, 2);
        }
    }
}

@mixin make-col($size, $columns: variables.$grid-columns) {
    flex: 0 0 math.percentage(math.div($size, $columns));
    // width: percentage(math.div($size, $columns));
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: math.percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: variables.$grid-columns) {
    margin-left: math.percentage(math.div($size, $columns));
}

@mixin make-col-push($size, $columns: variables.$grid-columns) {
    left: if($size > 0, math.percentage(math.div($size, $columns)), auto);
}

@mixin make-col-pull($size, $columns: variables.$grid-columns) {
    right: if($size > 0, math.percentage(math.div($size, $columns)), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
    // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
    @if $type == push {
        @include make-col-push($size, $columns);
    } @else if $type == pull {
        @include make-col-pull($size, $columns);
    } @else if $type == offset {
        @include make-col-offset($size, $columns);
    }
}
